(defvar eww "eww -c $HOME/.config/eww/bar")
(deflisten workspaces :initial "[]" "bash ~/.config/eww/bar/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/bar/scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/eww/bar/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly true :orientation "v" :valign "center"
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "ws ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}" :valign "center"
            (label :text "${workspace.id}" :valign "center")
            )
          )
        )
      )
    )
  )

;; Volume Widgets ;;
(defwidget volum []
	(eventbox :onhover "${eww} update volum=true" 		
			  :onhoverlost "${eww} update volum=false"
              :valign "end"
	(box      :orientation "v" 	  
			  :space-evenly "false" 
			  :spacing "2"
	(revealer :transition "slideup" 
			  :reveal volum         
			  :duration "550ms"
	(scale    :class "volbar" 	  
			  :value current-volume 
			  :orientation "v"      
			  :flipped true 
			  :max 105 
			  :min 0 
			  :onchange "amixer -D pipewire sset Master {}%" ))
	(button :class "volume-icon" ""))))

(defpoll current-volume :interval "1s" "amixer -D pipewire sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defvar volum false)

(defwidget bness []
	(eventbox :onhover "${eww} update bness=true" 		
			  :onhoverlost "${eww} update bness=false"
	(box      :orientation "v" 	  
			  :space-evenly "false" 
			  :spacing "2"
	(revealer :transition "slideup" 
			  :reveal bness
			  :duration "550ms"
	(scale    :class "bbar" 	  
			  :value current-bness 
			  :orientation "v"      
			  :flipped true 
			  :max 100
			  :min 0 
			  :onchange "brightnessctl s {}%" ))
	(button :class "bness-icon" ""))))

(defpoll current-bness :interval "1s" `scripts/bness`)
(defvar bness false)

(defwidget center [] 
  (box :class "container" (workspaces)))

(defwidget bottom [] 
  (box :space-evenly false :class "container" :valign "end" :orientation "v" (bness) (volum)))

(defwindow sidebar
  :monitor 1 :geometry (geometry 
    :x "8px"
    :height "90%"
    :width "32px"
    :anchor "center left")
  :exclusive true
  :focusable false
  :stacking "fg"
  (centerbox :orientation "v" (box) (center) (bottom)))
